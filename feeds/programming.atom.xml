<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian Köhler - Programming</title><link href="https://fkoehler.org/" rel="alternate"></link><link href="https://fkoehler.org/feeds/programming.atom.xml" rel="self"></link><id>https://fkoehler.org/</id><updated>2021-08-20T11:31:00+02:00</updated><entry><title>Taming git-annex using git-config and gitattributes</title><link href="https://fkoehler.org/2021/08/taming-git-annex.html" rel="alternate"></link><published>2021-08-20T11:31:00+02:00</published><updated>2021-08-20T11:31:00+02:00</updated><author><name>Fabian Köhler</name></author><id>tag:fkoehler.org,2021-08-20:/2021/08/taming-git-annex.html</id><summary type="html">&lt;p&gt;Git-annex allows to track (large) files with &lt;code&gt;git&lt;/code&gt; without adding their contents to the repository. &lt;code&gt;git-config&lt;/code&gt; and &lt;code&gt;gitattributes&lt;/code&gt; allow to prevent from accidentally annexing files which can be a major nuisance.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I started using &lt;a href="https://git-annex.branchable.com/"&gt;&lt;code&gt;git-annex&lt;/code&gt;&lt;/a&gt; again which is a great tool to track large files in the &lt;a href="http://git-scm.com/"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; version control system without actually adding their contents to &lt;code&gt;git&lt;/code&gt;.
It is very versatile and allows for the usage of many &lt;a href="https://git-annex.branchable.com/special_remotes/"&gt;storage backends&lt;/a&gt;.
However, proper care has to be taken when working with mixed content, i.e. some files that should be tracked by &lt;code&gt;git&lt;/code&gt; directly and some which should be stored using &lt;code&gt;git-annex&lt;/code&gt;.
To my understanding, &lt;code&gt;git-annex&lt;/code&gt; wants to annex every file and I messed up repositories a couple of times running &lt;code&gt;git annex sync&lt;/code&gt; and other related commands.
All my files ended up being annexed which is definitely not what I tried to achieve.
Even though this is easily reversible this behavior is often not ideal.&lt;/p&gt;
&lt;p&gt;Since I really like &lt;code&gt;git-annex&lt;/code&gt; in general, I wanted to find a way around this issue.
After some research I found that the documentation states that there are &lt;a href="https://git-annex.branchable.com/tips/largefiles/"&gt;two ways to gain fine control&lt;/a&gt; over which files will be annexed.
I still wanted to write this short post, since it took me a while to discover that one should tune &lt;code&gt;git-annex&lt;/code&gt; in this way.
For both approaches it is important that &lt;code&gt;git-annex&lt;/code&gt; tries to annex every file that it considers to be large.
Luckily, we can control this classification.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;git-config&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The simplest way is to rune the following &lt;code&gt;git-config&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;git annex config --set annex.largefiles 'largerthan=100kb and not (include=*.c or include=*.h)'&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This will instruct &lt;code&gt;git-annex&lt;/code&gt; to consider every file larger than &lt;code&gt;100kb&lt;/code&gt; to be large except for &lt;code&gt;.c&lt;/code&gt; and &lt;code&gt;.h&lt;/code&gt; files.
Every file that matches these criteria will be annexed.&lt;/p&gt;
&lt;p&gt;The command above sets the configuration for &lt;code&gt;git-annex&lt;/code&gt; globally, i.e. for every clone of the repository.
We can also set this for the current clone only, but I do not find that to be particularly useful (see the documentation on &lt;a href="https://git-annex.branchable.com/tips/largefiles/"&gt;how to do this&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;gitattributes&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The approach using &lt;code&gt;git-config&lt;/code&gt; quickly becomes complicated when we want to achieve very fine-grained control, e.g. setting &lt;code&gt;largerthan&lt;/code&gt; limits per file type or dealing with many cases.
Luckily, we can also control the &lt;code&gt;largefiles&lt;/code&gt; behavior using &lt;code&gt;gitattributes&lt;/code&gt;.
The following &lt;code&gt;.gitattributes&lt;/code&gt; file will achieve the same behavior as the aforementioned &lt;code&gt;git-config&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;* annex.largefiles=largerthan=100kb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;*.c annex.largefiles=nothing&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;*.h annex.largefiles=nothing&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;However, this allows us to be much more flexible and adding new cases just requires adding some lines in the &lt;code&gt;.gitattributes&lt;/code&gt; file.
Due to the way &lt;code&gt;git&lt;/code&gt; looks for &lt;code&gt;.gitattributes&lt;/code&gt; files (see &lt;a href="https://git-scm.com/docs/gitattributes"&gt;&lt;code&gt;gitattributes&lt;/code&gt; documentation&lt;/a&gt;) starting from the current directory and moving up the file system tree, we can easily change the behavior of &lt;code&gt;git-annex&lt;/code&gt; in subdirectories by overriding the attributes.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using these two techniques I finally convinced &lt;code&gt;git-annex&lt;/code&gt; to operate in the way I wanted it too rendering it very useful to work with mixed content (e.g. for machine learning projects or when taking online courses).
And yes, this requires some manual labor and consideration regarding which files we want annex but overall I believe this is actually a positive aspect.
There are some advanced topics like forcefully annexing small files and converting between &lt;code&gt;git&lt;/code&gt; controlled content and &lt;code&gt;git-annexed&lt;/code&gt; files which are beyond the scope of this article but are &lt;a href="https://git-annex.branchable.com/tips/largefiles/"&gt;well documented&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="git"></category><category term="git-annex"></category><category term="gitattributes"></category></entry><entry><title>Continuously Linting Ansible Playbooks and Roles</title><link href="https://fkoehler.org/2021/07/ansible-lint-github-workflow/index.html" rel="alternate"></link><published>2021-07-12T22:04:00+02:00</published><updated>2021-07-12T22:04:00+02:00</updated><author><name>Fabian Köhler</name></author><id>tag:fkoehler.org,2021-07-12:/2021/07/ansible-lint-github-workflow/index.html</id><summary type="html">&lt;p&gt;The &lt;code&gt;ansible-lint&lt;/code&gt; linter for Ansible YAML can be easily set up as a GitHub workflow, continuously checking playbooks and roles.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=ansible-lint"&gt;&lt;code&gt;ansible-lint&lt;/code&gt;&lt;/a&gt; is a helpful tool when dealing with &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; roles and playbooks.
It can help find common mistakes, prevent bugs and generally improve the code quality.
Using the &lt;a href="https://pre-commit.com/"&gt;&lt;code&gt;pre-commit&lt;/code&gt;&lt;/a&gt; framework it is trivial to set it up as hook in the Git version control system such that it checks the code before creating a commit.
Sometimes however, one might forget to run &lt;code&gt;pre-commit install&lt;/code&gt; after checking out a project or a collaborator is not using &lt;code&gt;pre-commit&lt;/code&gt;.
Therefore, it is helpful to set &lt;code&gt;ansible-lint&lt;/code&gt; up as a GitHub workflow that is executed automatically on every commit and pull request.
Of course this implies that one uses the &lt;a href="https://github.com"&gt;GitHub platform&lt;/a&gt;.
Other hosting services might offer other ways of achieving the same goal as well, but we focus on GitHub here.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://github.com/ansible/ansible-lint-action"&gt;this repository&lt;/a&gt; an unofficial GitHub action can be found.
However, I had no success with it.
I identified the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It uses outdated versions of the &lt;code&gt;ansible&lt;/code&gt; and the &lt;code&gt;ansible-lint&lt;/code&gt; Python packages.&lt;/li&gt;
&lt;li&gt;While the versions can be overridden I still could not get it to run.&lt;/li&gt;
&lt;li&gt;The action creates a &lt;a href="https://docker.com"&gt;Docker container&lt;/a&gt; which makes the action rather slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since &lt;code&gt;ansible-lint&lt;/code&gt; is a simple Python package and creating a Docker image seems a bit like overshooting, I set up a GitHub workflow myself.
I created the file &lt;code&gt;.github/workflows/ansible-lint.yml&lt;/code&gt; (can be named differently as well) with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;span class="hljs-attr"&gt;name:&lt;/span&gt; &lt;span class="hljs-string"&gt;lint&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;span class="hljs-attr"&gt;on:&lt;/span&gt; [&lt;span class="hljs-string"&gt;push&lt;/span&gt;, &lt;span class="hljs-string"&gt;pull_request&lt;/span&gt;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;span class="hljs-attr"&gt;jobs:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;  &lt;span class="hljs-attr"&gt;build:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    &lt;span class="hljs-attr"&gt;runs-on:&lt;/span&gt; &lt;span class="hljs-string"&gt;ubuntu-latest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    &lt;span class="hljs-attr"&gt;steps:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;uses:&lt;/span&gt; &lt;span class="hljs-string"&gt;actions/checkout@v2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;name:&lt;/span&gt; &lt;span class="hljs-string"&gt;Set&lt;/span&gt; &lt;span class="hljs-string"&gt;up&lt;/span&gt; &lt;span class="hljs-string"&gt;Python&lt;/span&gt; &lt;span class="hljs-number"&gt;3.9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;uses:&lt;/span&gt; &lt;span class="hljs-string"&gt;actions/setup-python@v2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;with:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          &lt;span class="hljs-attr"&gt;python-version:&lt;/span&gt; &lt;span class="hljs-number"&gt;3.9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;13&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;uses:&lt;/span&gt; &lt;span class="hljs-string"&gt;actions/cache@v2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;14&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;with:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          &lt;span class="hljs-attr"&gt;path:&lt;/span&gt; &lt;span class="hljs-string"&gt;~/.cache/pip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;16&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          &lt;span class="hljs-attr"&gt;key:&lt;/span&gt; &lt;span class="hljs-string"&gt;${{&lt;/span&gt; &lt;span class="hljs-string"&gt;runner.os&lt;/span&gt; &lt;span class="hljs-string"&gt;}}-pip-${{&lt;/span&gt; &lt;span class="hljs-string"&gt;hashFiles('**/requirements.txt')&lt;/span&gt; &lt;span class="hljs-string"&gt;}}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;17&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;name:&lt;/span&gt; &lt;span class="hljs-string"&gt;Install&lt;/span&gt; &lt;span class="hljs-string"&gt;dependencies&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;18&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;run:&lt;/span&gt; &lt;span class="hljs-string"&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;19&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          python -m pip install --upgrade pip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;20&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          python -m pip install -r requirements.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;name:&lt;/span&gt; &lt;span class="hljs-string"&gt;Run&lt;/span&gt; &lt;span class="hljs-string"&gt;ansible-lint&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;22&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;run:&lt;/span&gt; &lt;span class="hljs-string"&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;23&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          ansible-lint -v --show-relpath&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This instructs the workflow to run on every pushed commit and every pull request.
First the action &lt;code&gt;actions/check@v2&lt;/code&gt; is used to set up the environment and checkout the repository.
The action &lt;code&gt;actions/setup-python@v2&lt;/code&gt; sets up Python, version &lt;code&gt;3.9&lt;/code&gt; in my case.
Then I use the &lt;code&gt;actions/cache@v2&lt;/code&gt; to cache the Python dependencies I install in the following step.
I have a &lt;code&gt;requirements.txt&lt;/code&gt; file in the root of the repository to track the required Python packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    ansible==4.2.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    ansible-lint==5.0.12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;The line &lt;code&gt;path: ~/.cache/pip&lt;/code&gt; instructs the CI to cache the pip directory and &lt;code&gt;key: …&lt;/code&gt; determines a key for the cache which is based on the operating system as well as the hash of the &lt;code&gt;requirements.txt&lt;/code&gt;.
As long as the OS and the file do not change, the downloaded dependencies can be reused in the next step &lt;code&gt;Install dependencies&lt;/code&gt; thus speeding up the workflow.
Of course one could also manually install &lt;code&gt;ansible-lint&lt;/code&gt; with &lt;code&gt;python -m pip install ansible-lint&lt;/code&gt; but that would require figuring out a different caching mechanism and would prevent Dependabot from checking for updates (see below).&lt;/p&gt;
&lt;p&gt;In the last step &lt;code&gt;Run ansible-lint&lt;/code&gt; the linter is actually executed.
Here, one could also change the CLI arguments used when calling &lt;code&gt;ansible-lint&lt;/code&gt;, however it is much simpler to use a &lt;code&gt;.ansible-lint&lt;/code&gt; file in the repository to configure it.
More on this topic can be found &lt;a href="https://ansible-lint.readthedocs.io/en/latest/configuring.html#configuration-file"&gt;in the official documentation&lt;/a&gt;.
For example, it might be useful to exclude certain files that are not actually Ansible code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    &lt;span class="hljs-attr"&gt;exclude_paths:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-string"&gt;".pre-commit-config.yaml"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-string"&gt;"roles/vps/files/docker-compose-files"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;As you can see, setting up &lt;code&gt;ansible-lint&lt;/code&gt; as a GitHub action is pretty straightforward.
I have two final recommendations that you might find useful.
&lt;a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/about-dependabot-version-updates"&gt;Dependabot&lt;/a&gt; can be used to check the packages used in the &lt;code&gt;requirements.txt&lt;/code&gt; file for updates. Just create a file &lt;code&gt;.github/dependabot.yml&lt;/code&gt; with the content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    &lt;span class="hljs-attr"&gt;version:&lt;/span&gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    &lt;span class="hljs-attr"&gt;updates:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;      &lt;span class="hljs-bullet"&gt;-&lt;/span&gt; &lt;span class="hljs-attr"&gt;package-ecosystem:&lt;/span&gt; &lt;span class="hljs-string"&gt;"pip"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;directory:&lt;/span&gt; &lt;span class="hljs-string"&gt;"/"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        &lt;span class="hljs-attr"&gt;schedule:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;          &lt;span class="hljs-attr"&gt;interval:&lt;/span&gt; &lt;span class="hljs-string"&gt;"daily"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;to enable a daily update check. If Dependabot finds an update it will create a pull request for the repository.
You can add a nice badge to the &lt;code&gt;README.md&lt;/code&gt; file indicating the workflow status using &lt;a href="https://shields.io/category/build"&gt;Shields.io&lt;/a&gt;. Select the "GitHub Workflow Status" and specify your repository and the workflow name. The name is specified by the first line in the workflow file (&lt;code&gt;name: lint&lt;/code&gt;) so in my case it would be &lt;code&gt;lint&lt;/code&gt;. Shields.io will then generate links, markdown, etc. to easily use the badge.&lt;/p&gt;
&lt;p&gt;Two example repositories where I use this workflow can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/f-koehler/dotfiles"&gt;dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/f-koehler/playbooks"&gt;playbooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programming"></category><category term="Ansible"></category><category term="CI"></category><category term="GitHub"></category><category term="Workflow"></category><category term="Action"></category><category term="YAML"></category><category term="Lint"></category><category term="Dependabot"></category></entry></feed>