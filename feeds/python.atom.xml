<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian Köhler - Python</title><link href="https://fkoehler.org/" rel="alternate"></link><link href="https://fkoehler.org/feeds/python.atom.xml" rel="self"></link><id>https://fkoehler.org/</id><updated>2021-10-22T13:53:00+02:00</updated><entry><title>Refactoring a Large Snakefile</title><link href="https://fkoehler.org/2021/10/refactoring-a-large-snakefile.html" rel="alternate"></link><published>2021-10-22T13:53:00+02:00</published><updated>2021-10-22T13:53:00+02:00</updated><author><name>Fabian Köhler</name></author><id>tag:fkoehler.org,2021-10-22:/2021/10/refactoring-a-large-snakefile.html</id><summary type="html">&lt;p&gt;I describe how I simplified my life with a little restructuring of a complex &lt;code&gt;Snakefile&lt;/code&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I really enjoy using &lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;snakemake&lt;/a&gt; for my analysis workflows in my PhD projects.
However, in a current project of mine the &lt;code&gt;Snakefile&lt;/code&gt; rapidly grew in complexity due to the addition of more and more analyses.
This lead to two problems&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Snakefile&lt;/code&gt; quickly became hard to read and maintain.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://en.wikipedia.org/wiki/Andrew_File_System"&gt;&lt;abbr title="Andrew File System"&gt;AFS&lt;/abbr&gt;&lt;/a&gt; the universities was problematic.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Modularizing the Snakefile&lt;/h2&gt;
&lt;p&gt;Initially, my project structure looked as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;project/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── config.yaml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── .snakemake/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── metadata&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;└── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;There was only one main &lt;code&gt;Snakefile&lt;/code&gt; containing all analysis that ran across multiple datasets.
&lt;code&gt;snakemake&lt;/code&gt; stores all its files (metadata, lock files, etc.) in the &lt;code&gt;.snakemake&lt;/code&gt; directory.
First, I wanted to tackle the issue of readability/maintainability.
My workflow consists of multiple different types of analyses each consisting of potentially multiple subtasks.
However, these analyses are different from each other or in the language of &lt;code&gt;snakemake&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The full &lt;abbr title="directed acyclic graph"&gt;DAG&lt;/abbr&gt; of jobs consists of multiple disconnected &lt;abbr title="directed acyclic graphs"&gt;DAGs&lt;/abbr&gt; for each analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, it makes a sense to place all independent analyses in their own &lt;code&gt;Snakefile&lt;/code&gt; leading to the following directory structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;project/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── config.yaml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── Snakefiles/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis1/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis2/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── .snakemake/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── metadata&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;13&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;14&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;16&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;└── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;I added a rule in the &lt;code&gt;Snakefile&lt;/code&gt; for each analysis that would depend on all resulting files of the analysis such that I could reference in a main &lt;code&gt;Snakefile&lt;/code&gt; in the root of the project.
The rule I added looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;rule analysis1_all:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    input:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    output:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        ".analysis1.all"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    shell:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        "touch {output}"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;The main &lt;code&gt;Snakefile&lt;/code&gt; can then be written as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;configfile: "config.yaml"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;include: "Snakefiles/analysis1/Snakefile"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;include: "Snakefiles/analysis2/Snakefile"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;…&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;rule all:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;    input:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        ".analysis1.all",&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        ".analysis2.all",&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;        …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This makes maintaining the project a lot easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;project/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── config.yaml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── Snakefiles/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis1/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis2/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── Snakefile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── .snakemake → .snakecache/analysis1/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── .snakecache/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis1/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;13&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   ├── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;14&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   ├── metadata&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;16&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   ├── analysis2/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;17&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   ├── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;18&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   ├── metadata&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;19&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   │   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;20&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;│   └── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;22&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;├── dataset2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;23&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;└── …&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content><category term="Python"></category><category term="snakemake"></category><category term="snakefile"></category><category term="python"></category></entry><entry><title>Installing a Specific Build of an Anaconda Package</title><link href="https://fkoehler.org/2021/10/anaconda-specific-build.html" rel="alternate"></link><published>2021-10-14T15:10:00+02:00</published><updated>2021-10-14T15:10:00+02:00</updated><author><name>Fabian Köhler</name></author><id>tag:fkoehler.org,2021-10-14:/2021/10/anaconda-specific-build.html</id><summary type="html">&lt;p&gt;This blog post shows how to install a specific build of an Anaconda package.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I wrote a small python program to perform computations in parallel using the &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; exposed by the &lt;a href="https://mpi4py.readthedocs.io/en/stable/"&gt;&lt;code&gt;mpi4py&lt;/code&gt;&lt;/a&gt; library.
By using the convenient &lt;a href="https://docs.h5py.org/en/stable/"&gt;&lt;code&gt;h5py&lt;/code&gt;&lt;/a&gt; library, I store the results in a single, large &lt;abbr title="Hierarchical Data Format 5"&gt;HDF5&lt;/abbr&gt; file.
This however required the &lt;a href="https://docs.h5py.org/en/stable/mpi.html"&gt;parallel &lt;abbr title="Hierarchical Data Format 5"&gt;HDF5&lt;/abbr&gt;&lt;/a&gt; support to be compiled into the &lt;abbr title="Hierarchical Data Format 5"&gt;HDF5&lt;/abbr&gt; library.
Naturally, the first step is to check whether an Anaconda package is available that includes the &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; support.
Running &lt;code&gt;conda search h5py&lt;/code&gt; I found the following available packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;Loading channels: done&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;# Name Version Build                      Channel&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;3&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;…&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py37h3a1f665_0   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;5&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py37h3a1f665_1   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;6&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py38h211b2b0_0   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;7&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py38h211b2b0_1   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;8&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py39ha1f86df_0   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;9&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_mpich_py39ha1f86df_1   conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;10&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py37hc2f5ef6_0 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py37hc2f5ef6_1 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py38h63e9fd9_0 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;13&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py38h63e9fd9_1 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;14&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py39hb889842_0 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   mpi_openmpi_py39hb889842_1 conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;16&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py37hd308b1e_100     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;17&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py37hd308b1e_101     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;18&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py38hfbb2109_100     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;19&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py38hfbb2109_101     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;20&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py39h7e08c79_100     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;h5py   3.4.0   nompi_py39h7e08c79_101     conda-forge&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;I truncated the output to only show the &lt;code&gt;3.4.0&lt;/code&gt; version, which is the most recent one and the one I want to use.
We can clearly identify three different builds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nompi&lt;/code&gt;: no &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; support (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mpi_mpich&lt;/code&gt;: &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; support via the &lt;a href="https://www.mpich.org"&gt;MPICH&lt;/a&gt; implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openmpi&lt;/code&gt;: &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; support via the &lt;a href="https://www.open-mpi.org"&gt;OpenMPI&lt;/a&gt; implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For my small project I decided to install a build using the MPICH implementation.
However, it was unclear to me what the syntax for specifying the build is.
I could not find anything in the documentation.&lt;/p&gt;
&lt;p&gt;The first thing I found by searching the wider web was to use the syntax&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;conda install &amp;lt;package_name&amp;gt;=&amp;lt;version&amp;gt;=&amp;lt;build_string&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;conda install h5py=3.4.0=mpi_mpich_py39ha1f86df_1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;The latest version can be installed using wildcards&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlight"&gt;
&lt;tr&gt;&lt;td class="linenos"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre class="highlight"&gt;conda install "h5py=*=mpi_mpich_*"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;By exporting my Anaconda environment via &lt;code&gt;conda export --from-history&lt;/code&gt; then showed me that there is another, more concise syntax.
We can just specify the package as &lt;code&gt;h5py[build=mpi_mpich_*]&lt;/code&gt; or &lt;code&gt;h5py[build=mpi_*]&lt;/code&gt; if we do not care about the actual &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; implementation.
Due to the extensive dependency resolution process &lt;code&gt;conda&lt;/code&gt; includes the &lt;abbr title="Message Passing Interface"&gt;MPI&lt;/abbr&gt; implementation as a dependency and installs it.&lt;/p&gt;
&lt;p&gt;I found this piece of information regarding &lt;code&gt;build&lt;/code&gt; strings in the &lt;a href="https://docs.conda.io/projects/conda-build/en/latest/resources/package-spec.html"&gt;&lt;code&gt;conda-build&lt;/code&gt;&lt;/a&gt; documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The build string. May not contain "-". Differentiates builds of packages with otherwise identical names and versions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A build with other dependencies, such as Python 3.4 instead of Python 2.7.&lt;/li&gt;
&lt;li&gt;A bug fix in the build process.&lt;/li&gt;
&lt;li&gt;Some different optional dependencies, such as MKL versus ATLAS linkage. Nothing in conda actually inspects the build string. Strings such as np18py34_1 are designed only for human readability and conda never parses them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which tells us that these build strings are just a human-readable identifier for the package and no actual information is extracted from them.
&lt;code&gt;conda install&lt;/code&gt; seems to perform some pattern matching using this string, i.e. it is ok to only specify the start of the build string and to use wildcards.&lt;/p&gt;
&lt;p&gt;So the strategy seems when installing a specific variant of an Anaconda package seems to be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perform a &lt;code&gt;conda search&lt;/code&gt; for the package.&lt;/li&gt;
&lt;li&gt;Identify the build string.&lt;/li&gt;
&lt;li&gt;Install the dependency by invoking &lt;code&gt;conda install &amp;lt;package&amp;gt;[build=&amp;lt;build_string_pattern&amp;gt;]&lt;/code&gt; and using a proper build string pattern (e.g. use only the start of the build string and employ wildcards where necessary).&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="anaconda"></category><category term="conda"></category><category term="mamba"></category><category term="python"></category><category term="package"></category><category term="build"></category></entry></feed>